ggplot(train, aes(x = v74)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = v75)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v75)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = v79)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v79)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = v91)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v47)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = v91)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v52)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = v107)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v56)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = v107)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v62)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = v110)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v110)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = 112)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = 112)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = v125)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v125)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(cat_train, aes(x = v129)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v129)) + geom_bar(aes(y=(..count..)/sum(..count..))))
pdf(file = "hist_and_plots.pdf")
grid.arrange(ggplot(cat_train, aes(x = v3)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v3)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v22)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v22)) + geom_bar(aes(y=(..count..)/sum(..count..))))
pdf(file = "hist_and_plots.pdf")
grid.arrange(ggplot(cat_train, aes(x = v3)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v3)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v22)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v22)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v24)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v24)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v31)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v31)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v38)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v38)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v47)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v47)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v52)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v52)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v56)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v56)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v62)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v62)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v66)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v66)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v71)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v71)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v72)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v72)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v74)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v74)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v75)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v75)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v79)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v79)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v91)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v91)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v107)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v107)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v110)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v110)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = 112)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = 112)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v125)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v125)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v129)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v129)) + geom_bar(aes(y=(..count..)/sum(..count..))))
## close the device to do the drawing
dev.off()
con_train
ggplot(con_train, aes(x = v10)) + geom_histogram(statbin = 0.5)
ggplot(con_train, aes(x = v10)) + geom_histogram(binwidth = 0.5)
ggplot(con_train, aes(x = v10)) + geom_histogram(binwidth = 0.5, color = "blue")
pdf(file = "hist_and_plots.pdf")
grid.arrange(ggplot(con_train, aes(x = v10)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v10)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v12)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v12)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v14)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v14)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v21)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v21)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v34)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v34)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(
ggplot(cat_train, aes(x = v40)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v40)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v50)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v50)) + geom_bar(aes(y=(..count..)/sum(..count..))))
grid.arrange(
ggplot(cat_train, aes(x = v114)) + geom_bar(aes(y=(..count..)/sum(..count..))),
ggplot(train, aes(x = v114)) + geom_bar(aes(y=(..count..)/sum(..count..))))
## close the device to do the drawing
dev.off()
pdf(file = "continuous_plots.pdf")
grid.arrange(ggplot(con_train, aes(x = v10)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v10)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v12)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v12)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v14)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v14)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v21)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v21)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v34)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v34)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v40)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v40)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v50)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v50)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
grid.arrange(ggplot(con_train, aes(x = v114)) + geom_histogram(binwidth = 0.5, na.rm=TRUE),
ggplot(train, aes(x = v114)) + geom_histogram(binwidth = 0.5, na.rm = TRUE))
## close the device to do the drawing
dev.off()
View(test)
library(haven)
adult <- read_sas("~/Desktop/CHIS 2009 PUF- Adult SAS/adult.sas7bdat")
View(adult)
adult$AB1
adult2 <- adult
filter(adult2)
filter(adult2, RBMI)
select(adult2, RBMI)
class(adult)
source('~/.active-rstudio-document', echo=TRUE)
adult$RACEHPR2
levels(factor(adult$RACEHPR2))
levels(factor(adult$RACECEN))
levels(factor(adult$RACEDOF))
adult <- adult_raw %>%
select(RBMI, BMI_P, RACEHPR2, SRSEX, SRAGE_P, MARIT2, AB1, ASTCUR,
AB51, POVLL)
adult <- adult %>%
select(RBMI, BMI_P, RACEHPR2, SRSEX, SRAGE_P, MARIT2, AB1, ASTCUR,
AB51, POVLL)
head(adult)
levels(factor(adult$POVLL))
ggplot(adult, aes(x = SRAGE_P)) +
geom_histogram()
ggplot(adult, aes(x = BMI_P)) +
geom_histogram()
ggplot(adult, aes(x = SRAGE_P, col = factor(RMBI), fill = factor(RBMI))) +
geom_histogram(binwidth = 1)
ggplot(adult, aes(x = SRAGE_P, col = factor(RBMI), fill = factor(RBMI))) +
geom_histogram(binwidth = 1)
mean(adult$RBMI)
mean(adult$BMI_P)
IQR(adult$BMI_P)
mean(adult$BMI_P) + 1.5*IQR(adult$BMI_P)
mean(adult$BMI_P) + 3*IQR(adult$BMI_P)
mean(adult$BMI_P) - 3*IQR(adult$BMI_P)
mean(adult$BMI_P) - 1.5*IQR(adult$BMI_P)
sd(adult$BMI_P)
26.72 + 3*5.74
adult$RBMI
levels(factor(adult$RBMI))
adult <- adult[adult$SRAGE_P <= 84, ]
# Remove individuals with a BMI below 16 and above or equal to 52
# (remove positive tail)
adult <- adult[adult$BMI_P >= 16 & adult$BMI_P < 52, ]
# Relabel the race variable:
adult$RACEHPR2 <- factor(adult$RACEHPR2, labels =
c("Latino", "Pacific Islander",
"American Indian/Alaskan Native", "Asian",
"African American", "White",
"Other Single/Multiple Race"))
# Relabel the BMI categories variable:
adult$RBMI <- factor(adult$RBMI, labels = c("Under-weight",
"Normal-weight",
"Over-weight",
"Obese"))
## Data exploration: Frequency/Density plots ----
# The color scale used in the plot
BMI_fill <- scale_fill_brewer("BMI Category", palette = "Reds")
# Theme to fix category display in faceted plot
fix_strips <- theme(strip.text.y = element_text(angle = 0, hjust = 0, vjust = 0.1, size = 14),
strip.background = element_blank(),
legend.position = "none")
# 4 frequency histograms of BMI frequency by age
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1) +
fix_strips +
BMI_fill +
facet_grid(RBMI ~ .) +
theme_classic()
# Plot 1 - Count histogram of BMI by age
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1) +
BMI_fill
# Plot 2 - Density histogram of BMI by age
# Note -  we get the density within each BMI category,
#         not within each age group
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1, aes(y = ..density..)) +
BMI_fill
# Plot 3 - Faceted count histogram of BMI by age
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1) +
BMI_fill +
facet_grid(RBMI ~ .)
# Plot 4 - Faceted density histogram
# Note - same issue as plot 2
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1, aes(y = ..density..)) +
BMI_fill +
facet_grid(RBMI ~ .)
# Plot 5 - Density histogram with position = "fill"
# Note - calculates density across category not bin
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1, aes(y = ..density..), position = "fill") +
BMI_fill
# Plot 6 - The accurate histogram - density across bin
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1, aes(y = ..count../sum(..count..)), position = "fill") +
BMI_fill
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1, aes(y = ..count../sum(..count..)), position = "fill") +
BMI_fill +
facet_grid(RBMI ~ .)
## Mosaic plot of data ---------------------
mosaicGG <- function(data, X, FILL) {
# Generalized function to create a mosaic plot comparing
# two variables.
#
# Args:
#   data - the original data frame (data.frame)
#   X - the x variable's name in original data frame (character)
#   FILL - the y variable's name in the original data frame (character)
#
# Returns:
#   Mosaic plot for two variables in the data frame. The fill is
#   determined by residuals to show over-/under-representation.
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# Plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
# Mosaic plot 1 - BMI described by age
mosaicGG(adult, "SRAGE_P", "RBMI")
# Mosaic plot 2 - Poverty described by age
mosaicGG(adult, "SRAGE_P", "POVLL")
library(ggthemes)
install.packages(ggthemes)
install.packages("ggthemes)
""
)
))))
l
install.packages("ggthemes")
mosaicGG <- function(data, X, FILL) {
# Generalized function to create a mosaic plot comparing
# two variables.
#
# Args:
#   data - the original data frame (data.frame)
#   X - the x variable's name in original data frame (character)
#   FILL - the y variable's name in the original data frame (character)
#
# Returns:
#   Mosaic plot for two variables in the data frame. The fill is
#   determined by residuals to show over-/under-representation.
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# Plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
mosaicGG(adult, "SRAGE_P", "RBMI")
library(ggthemes)
mosaicGG(adult, "SRAGE_P", "RBMI")
mosaicGG(adult, "SRAGE_P", "POVLL")
library(readr)
wine <- read_csv("~/Desktop/LinearRegression/wine.csv")
View(wine)
str(wine)
summary(wine)
model1 = lm(Price ~ AGST, data = wine)
model1
summary(model1)
model1$residuals
SSE = sum(model1$residuals)
SSE
SSE = sum(model1$residuals^2)
SSE
model2 = lm(Price ~ AGST + HarvestRain, data = wine)
model2
str(model2)
summary(model2)
SSE = sum(model2$residuals^2)
SSE
model3 = lm(Price ~ AGST + HarvestRain + WinterRain + Age + FrancePop, data = wine)
summary(model3)
SSE = sum(model3$residuals^2)
SSE
model4 = lm(Price ~ .-Price-FrancePop, data= wine)
summary(model4)
model4 = lm(Price ~ AGST + HarvestRain + WinterRain + Age)
model4 = lm(Price ~ AGST + HarvestRain + WinterRain + Age, data = wine)
summary(model4)
summary(model4)
cor(wine$WinterRain, wine$Price )
cor(wine)
model5 = lm(Price ~ AGST + HarvestRain + WinterRain, data = wine)
summary(model5)
model6 = lm(Price ~ AGST + HarvestRain + WinterRain + FrancePop, data = wine)
summary(model6)
summary(model4)
library(readr)
wine_test <- read_csv("~/Desktop/LinearRegression/wine_test.csv")
View(wine_test)
str(wine_test)
predictTest = predict(model4, newdata = wine_test)
predictTest
SSE = sum((wine_test$Price - predictTest)^2)
SST = sum((wine_test$Price - mean(wine$Price))^2)
1 - (SSE/SST)
library(readr)
NBA_train <- read_csv("~/Desktop/LinearRegression/NBA_train.csv")
View(NBA_train)
nba <- NBA_train
str(nba)
help(str)
str(nba, give.attr = FALSE)
table(nba$W, nba$Playoffs)
nba$pts_diff
nba$pts_diff = nba$PTS - nba$oppPTS
nba
plot(nba$pts_diff, nba$w)
plot(nba$pts_diff, nba$W)
winsReg = lm(W ~ pts_diff, data = nba)
summary(winsReg)
ggplot(nba, aes(x = pts_diff, y = W)) + geom_points()
library(ggplot2)
ggplot(nba, aes(x = pts_diff, y = W)) + geom_points()
ggplot(nba, aes(x = pts_diff, y = W)) + geom_point()
ggplot(nba, aes(x = pts_diff, y = W)) + geom_point(alpha = 0.5)
ggplot(nba, aes(x = pts_diff, y = W)) + geom_point(alpha = 0.9)
ggplot(nba, aes(x = pts_diff, y = W)) + geom_point(alpha = 0.1)
ggplot(nba, aes(x = pts_diff, y = W)) + geom_point(alpha = 0.3)
ggplot(nba, aes(x = pts_diff, y = W)) + geom_point(alpha = 0.4)
pointsReg = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + TOV + STL + BLK, data=nba)
pointsReg = lm(PTS ~ 2PA + 3PA + FTA + AST + ORB + DRB + TOV + STL + BLK, data=nba)
pointsReg = lm(PTS ~ `2PA` + `3PA` + FTA + AST + ORB + DRB + TOV + STL + BLK, data=nba)
summary(pointsReg)
pointsReg$residuals
SSE = sum(pointsReg$residuals^2)
SSE
RMSE = sqrt(SSE/nrow(nba))
RMSE
mean(nba$PTS)
184/8370
summary(pointsReg)
pointsReg = lm(PTS ~ `2PA` + `3PA` + FTA + AST + ORB + DRB + STL + BLK, data=nba)
summary(pointsReg)
SSE = sum(pointsReg$residuals^2)
RMSE = sqrt(SSE/nrow(nba))
RMSE
pointsReg = lm(PTS ~ `2PA` + `3PA` + FTA + AST + ORB + STL + BLK, data=nba)
SSE = sum(pointsReg$residuals^2)
RMSE = sqrt(SSE/nrow(nba))
RMSE
summary(pointsReg)
pointsReg = lm(PTS ~ `2PA` + `3PA` + FTA + AST + ORB + STL, data=nba)
summary(pointsReg)
SSE = sum(pointsReg$residuals^2)
RMSE
RMSE = sqrt(SSE/nrow(nba))
RMSE
pointsReg = lm(PTS ~ `2PA` + `3PA` + FTA + AST + ORB, data=nba)
summary(pointsReg)
SSE = sum(pointsReg$residuals^2)
RMSE = sqrt(SSE/nrow(nba))
RMSE
pointsReg = lm(PTS ~ `2PA` + `3PA` + FTA + AST + ORB + STL, data=nba)
library(readr)
NBA_test <- read_csv("~/Desktop/LinearRegression/NBA_test.csv")
View(NBA_test)
nba_test <- NBA_test
PointsPredictions = predict(pointsReg, newdata = nba_test)
SSE = sum((PointsPredictions - nba_test$PTS)^2)
SST = sum((mean(nba$PTS)-nba_test$PTS)^2)
R2 = 1 - (SSE/SST)
R2
str(nba_test)
str(nba_test, list.attr = FALSE)
head(nba_test)
RMSE = sqrt(SSE/nrow(nba_test))
RMSE
getwd()
setwd
setwd("/Users/monishagopal/Desktop/Springboard/LinearRegressionExercise/linear_regression")
getwd()
getwd() # where am I?
list.files("dataSets") # files in the dataSets folder
states.data <- readRDS("dataSets/states.rds")
states.data
str(states.data)
help(str)
str(states.data, give.attr = FALSE)
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
tail(states.info, 8)
tail(states.info)
tail(states.info, 10)
tail(states.info, 15)
tail(states.info,20)
tail(states.info, 8)
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
cor(sts.ex.sat)
plot(sts.ex.sat)
sat.mod <- lm(csat ~ expense, # regression formula
data=states.data) # data set
summary(sat.mod) # show regression coefficients table
summary(lm(csat ~ expense + percent, data = states.data))
class(sat.mod)
names(sat.mod)
methods(class = class(sat.mod))[1:9]
confint(sat.mod)
hist(residuals(sat.mod))
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(sat.mod, which = c(1, 2)) # "which" argument optional
sat.voting.mod <-  lm(csat ~ expense + house + senate,
data = na.omit(states.data))
sat.mod <- update(sat.mod, data=na.omit(states.data))
anova(sat.mod, sat.voting.mod)
coef(summary(sat.voting.mod))
